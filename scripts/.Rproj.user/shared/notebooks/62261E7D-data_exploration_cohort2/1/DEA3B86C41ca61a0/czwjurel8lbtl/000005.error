{"frames":[{"func":"FindAllMarkers(object = cohort2_, only.pos = TRUE, min.pct = 0.2, \n    logfc.threshold = 0.2, min.diff.pct = 0.1, test.use = \"wilcox\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatch(expr = {\n    FindMarkers(object = object, assay = assay, ident.1 = if (is.null(x = node)) {\n        idents.all[i]\n    } ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchList(expr, classes, parentenv, handlers)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"doTryCatch(return(expr), name, parentenv, handler)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"FindMarkers(object = object, assay = assay, ident.1 = if (is.null(x = node)) {\n    idents.all[i]\n} else {\n    tree ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"FindMarkers.Seurat(object = object, assay = assay, ident.1 = if (is.null(x = node)) {\n    idents.all[i]\n} else {\n    tree ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"FindMarkers(object = data.use, slot = slot, cells.1 = cells$cells.1, \n    cells.2 = cells$cells.2, features = features, logfc.threshold = logfc.threshold, \n    test.use = test.use, min.pct = min.pct, min.diff.pct = min.diff.pct, \n    verbose = verbose, only.pos = only.pos, max.cells.per.ident = max.cells.per.ident,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"FindMarkers.Assay(object = data.use, slot = slot, cells.1 = cells$cells.1, \n    cells.2 = cells$cells.2, features = features, logfc.threshold = logfc.threshold, \n    test.use = test.use, min.pct = min.pct, min.diff.pct = min.diff.pct, \n    verbose = verbose, only.pos = only.pos, max.cells.per.ident = max.cells.per.ident,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"FindMarkers(object = data.use, slot = data.slot, counts = counts, \n    cells.1 = cells.1, cells.2 = cells.2, features = features, \n    logfc.threshold = logfc.threshold, test.use = test.use, min.pct = min.pct, \n    min.diff.pct = min.diff.pct, verbose = verbose, only.pos = only.pos,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"FindMarkers.default(object = data.use, slot = data.slot, counts = counts, \n    cells.1 = cells.1, cells.2 = cells.2, features = features, \n    logfc.threshold = logfc.threshold, test.use = test.use, min.pct = min.pct, \n    min.diff.pct = min.diff.pct, verbose = verbose, only.pos = only.pos,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"PerformDE(object = object, cells.1 = cells.1, cells.2 = cells.2, \n    features = features, test.use = test.use, verbose = verbose, \n    min.cells.feature = min.cells.feature, latent.vars = latent.vars, \n    densify = densify, ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"WilcoxDETest(data.use = data.use, cells.1 = cells.1, cells.2 = cells.2, \n    verbose = verbose, ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"my.sapply(X = 1:nrow(x = data.use), FUN = function(x) {\n    return(wilcox.test(data.use[x, ] ~ group.info[, \"group\"], \n        ...)$p.value)\n})","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"pblapply(X = X, FUN = FUN, ..., cl = cl)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"lapply(X[Split[[i]]], FUN, ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"FUN(X[[i]], ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"wilcox.test(data.use[x, ] ~ group.info[, \"group\"], ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"wilcox.test.formula(data.use[x, ] ~ group.info[, \"group\"], ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"do.call(\"wilcox.test\", c(DATA, list(...)))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"wilcox.test(x = c(ACCAAGGACACAGTGGTAGTAGAAGCA_1 = 3.55491101976925, \nAATCGAATGACAGTGGTAACGCTGTTG_1 = 3.50251108154097, ACGGATATTCACTTATGTACTCCAGGG_1 = 2.58470742090515, \nAAGACATGCATCCAACCGCAAACGTGG_1 = 3.5651126422331, CAGAATCGTCGCTAAGCAGCTCCTTGA_1 = 3.04357055530421, \nATCAGAGCTCCGACAAGAACTCATACG_1 = 2.76289221902713, CAAAGGCACGATGAACTGACAAACTTT_1 = 3.13224779802289,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"wilcox.test.default(x = c(ACCAAGGACACAGTGGTAGTAGAAGCA_1 = 3.55491101976925, \nAATCGAATGACAGTGGTAACGCTGTTG_1 = 3.50251108154097, ACGGATATTCACTTATGTACTCCAGGG_1 = 2.58470742090515, \nAAGACATGCATCCAACCGCAAACGTGG_1 = 3.5651126422331, CAGAATCGTCGCTAAGCAGCTCCTTGA_1 = 3.04357055530421, \nATCAGAGCTCCGACAAGAACTCATACG_1 = 2.76289221902713, CAAAGGCACGATGAACTGACAAACTTT_1 = 3.13224779802289,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"rank(if (is.finite(digits.rank)) signif(r, digits.rank) else r)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"no loop for break/next, jumping to top level"}